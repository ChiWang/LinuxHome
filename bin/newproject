#! /bin/bash
:<<EOF
 *  $Id: newproject, 2014-02-15 22:32:33 chi $
 *  Author(s):
 *    Chi WANG (chiwang@mail.ustc.edu.cn) 09/06/2013
EOF

#+ functions
#----------------------------------------------------
Usage(){
echo "
  Usage: (2 arguments)
    newproject  projectTag  projectName
        projectTag = {c++ | g4 | bes | bash | python}
"
exit 1
}

Readme(){   #+ this only used for g4 and c++
#+ readme
cat > $1/Readme.md <<EOF
(*
 *        Project:    $1
 *==================================================
 *  \$Id: Readme.md, 2014-02-16 14:54:50 chi $
 *  Author(s):
 *    Chi WANG (chiwang@mail.ustc.edu.cn) $Date
 *==================================================
*)

Note:
-------------

Compilation:
-------------
    scons       // will create executable file sss at ./, and temporary files in ./Scons
    scons -c    // clean up
    more details in SConstruct

Tips:
-------------
    # How to use Cscope and Ctags
    # It help your coding more efficiency.

    1.  Cscope:
        1.1.  cd into "RootDir of this project"(where holds src and include, etc)

        1.2.  create cscope* files
            cscope -Rbq

        1.3.  then, while you use vim open a source file,
            1.3.1     :cs add /SomePathTo/cscope.out /SomePath
            1.3.2     :cs find g anyThing
            1.3.3     :cs find c anyThing

        1.4.  show the outputs of 1.3 in a window, do in vim
            :cw
            (if report errors, be sure that this line ":set cscopequickfix=s-,c-,d-,i-,t-,e-" in your ~/.vimrc)

    2.  Ctags:
        2.1.  cd into "RootDir of this project"(where holds src and include, etc)

        2.2.  create tags file
            ctags -R

        2.3.  then, while you use vim open a source file,
            2.3.1   :set tags=/SomePathTo/tags
            2.3.2   Ctrl+] OR Ctrl+T to find something

EOF
if [[ $Tag == "g4" ]];then
cat >> $1/Readme.md <<EOF
Structure:
-------------
    SConstruct      // SCons read this file
    Kernel          // all constants
    Event           // all event classes
    Geometry        // all GDML files
    Simulation      // simulation
    Analysis        // analysis codes, input is data/simulation*
    data/analysis   // analysis results
EOF
fi
}

SetupCpp(){
#+ setup
mkdir -p $1/include $1/src 2>/dev/null
sed "s/MyPro/$1/g" $temp/main.cc > $1/src/$1_main.cc
sed "s/MyPro/$1/g" $temp/SConstruct > $1/SConstruct
cp $temp/src.scons $1/src/src.scons

#+ Readme.md
Readme $1
}

SetupG4(){
#+ setup
cp $temp $1 -r
sed "s/MyPro/$1/g" -i $1/SConstruct
for pkg in `ls $1`;do
  if [[ ! -d $1/$pkg ]];then
    continue
  fi
  pushd $1/$pkg 1>/dev/null
    for dir in `ls`;do
      if [[ $dir == 'include' || $dir == 'src' ]];then
        for file in `ls $dir`;do
          rename=`echo ${file/MyPro/$1}`
          mv $dir/$file $dir/$rename
        done
        sed "s/MyPro/$1/g" -i $dir/*
      fi
    done
  popd 1>/dev/null
done

#+ Readme.md
Readme $1
}

SetupBes(){
  echo "setup BES"
}

SetupBash(){
cat >$1.sh <<EOF
#! /bin/bash

#+ functions
#----------------------------------------------------
Usage(){
echo "
  Usage:
    bash $1
"
exit 1
}

#+ main
#----------------------------------------------------
EOF
}

SetupPython(){
cat >$1.py <<EOF
#! /bin/python
EOF
}

#+ main
#----------------------------------------------------
if [ $# != 2 ];then
  Usage
fi
echo "    Setting up $1 project \"$2\"" 
tempRoot="$HOME/share/common/template"
Tag=$1
temp="$tempRoot/$Tag"
Date=`date +%d/%m/%Y`

#+ setup
case "$Tag" in
  c++)
    SetupCpp $2
    ;;
  g4)
    SetupG4 $2
    ;;
  bes)
    SetupBes $2
    ;;
  bash)
    SetupBash $2
    ;;
  python)
    SetupPython $2
    ;;
esac
